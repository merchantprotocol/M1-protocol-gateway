<?php
/**
 * Mage Plugins
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Mage Plugins Commercial License (MPCL 1.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * https://mageplugins.net/commercial-license/
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to mageplugins@gmail.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade to newer
 * versions in the future. If you wish to customize the extension for your
 * needs please refer to https://www.mageplugins.net for more information.
 *
 * @category   MP
 * @package    MP_Gateway
 * @copyright  Copyright (c) 2006-2018 Mage Plugins Inc. and affiliates (https://mageplugins.net/)
 * @license    https://mageplugins.net/commercial-license/  Mage Plugins Commercial License (MPCL 1.0)
 */

/**
 * @author Mage Plugins (https://mageplugins.net)
 */
?>
<!-- Cards list -->
<table cellspacing="0" class="form-edit">
	<tr>
		<td class="card-list">
			<div class="entry-edit-head">
				<h4 class="icon-head head-customer-card-list"><?php echo Mage::helper('mp_gateway')->__('Saved Credit Cards') ?></h4>
			</div>
			<div class="sub-btn-set"><?php echo $this->getAddNewButtonHtml() ?></div>
			<ul id="card_list">
    <?php $_iterator = 0; ?>
    <?php if(count($cardCollection)): ?>
        <?php foreach ($cardCollection as $_card): ?>
        <li id="card_item_<?php echo $_card->getId() ?>">
            <?php if (!$this->isReadonly()): ?>
            <a href="#" class="btn-remove-card"> <img
						src="<?php echo $this->getSkinUrl('images/cancel_icon.gif') ?>"
						alt="<?php echo Mage::helper('core')->quoteEscape(Mage::helper('mp_gateway')->__('Remove Card')) ?>"
						id="delete_button<?php echo ++$_iterator ?>" />
				</a> <a href="#" id="select_button_<?php echo $_card->getId() ?>"
					class="select_button btn-edit-card"> <img
						src="<?php echo $this->getSkinUrl('images/edit_icon.gif') ?>"
						alt="<?php echo Mage::helper('core')->quoteEscape(Mage::helper('mp_gateway')->__('Edit Card')) ?>" />
				</a>
            <?php endif;?>
            <card>
                <?php echo $_card->format('html')?>
            </card>
					<div class="card-type">
						<span class="card-type-line"> <input type="radio"
							<?php if ($this->isReadonly()):?> disabled="disabled"
							<?php endif;?> value="<?php echo $_card->getId() ?>"
							id="card_item_<?php echo $_card->getId() ?>"
							name="account[default_card]"
							title="<?php echo Mage::helper('core')->quoteEscape(Mage::helper('mp_gateway')->__('Set as Default Card')) ?>"
							<?php if($_card->getIsDefault()): ?> checked="checked"
							<?php endif; ?> /> &nbsp;<label
							for="card_item<?php echo $_card->getId() ?>"><?php echo Mage::helper('customer')->__('Default Card') ?></label>
						</span>
					</div>
				</li>
        <?php endforeach; ?>
    <?php endif; ?>
    </ul>
		</td>
		<td>
			<!-- Template for adding card item to list -->
    <?php $_templatePrefix = $this->getTemplatePrefix()?>
    <div id="card_item_template" class="no-display template">
        <?php if (!$this->isReadonly()): ?>
        <a href="#" class="btn-remove-card"> <img
					src="<?php echo $this->getSkinUrl('images/cancel_icon.gif') ?>"
					alt="<?php echo Mage::helper('core')->quoteEscape(Mage::helper('customer')->__('Remove card')) ?>"
					id="delete_button<?php echo ++$_iterator ?>" />
				</a> <a href="#" id="select_button_"
					class="select_button btn-edit-card"> <img
					src="<?php echo $this->getSkinUrl('images/edit_icon.gif') ?>"
					alt="<?php echo Mage::helper('core')->quoteEscape(Mage::helper('customer')->__('Edit card')) ?>" />
				</a>
        <?php endif;?>
        <card><?php echo Mage::helper('customer')->__('New Customer Card') ?></card>
				<div class="card-type">
					<span class="card-type-line"> <input
						<?php if ($this->isReadonly()):?> disabled="disabled"
						<?php endif;?> type="radio" value="<?php echo $_templatePrefix ?>"
						id="card_item<?php echo $_templatePrefix ?>"
						name="account[default_card]"
						title="<?php echo Mage::helper('core')->quoteEscape(Mage::helper('mp_gateway')->__('Set as Default Card')) ?>" />
						&nbsp;<label for="card_item<?php echo $_templatePrefix ?>"><?php echo Mage::helper('customer')->__('Default Card') ?></label>
					</span>
				</div>
			</div> <!-- Card form template -->
			<div id="card_form_template" class="no-display template">
    <?php
				// Set form template elements prefix
				$this->getForm ()->setHtmlIdPrefix ( $_templatePrefix )->setFieldNameSuffix ( 'card[' . $_templatePrefix . ']' );
				?>
    <?php echo $this->getForm()->getHtml()?>
    <?php echo $this->getCancelButtonHtml()?>
    </div> <!-- --> <!-- Cards forms -->
			<div class="entry-edit" id="card_form_container">
        <?php if(count($cardCollection)): ?>
            <?php foreach ($cardCollection as $_card): ?>
            <div id="form_card_item_<?php echo $_card->getId() ?>"
					style="display: none">
            <?php
										$this->getForm ()->addValues ( $_card->getData () )->setHtmlIdPrefix ( "_item{$_card->getId()}" )->setFieldNameSuffix ( 'card[' . $_card->getId () . ']' );
										$this->addValuesToNamePrefixElement ( $_card->getPrefix () )->addValuesToNameSuffixElement ( $_card->getSuffix () );
										?>
            <?php echo $this->getForm()->getHtml()?>
            <input type="hidden"
						name="card[<?php echo $_card->getId() ?>][_deleted]"
						id="deleted_card_item_<?php echo $_card->getId() ?>" />
				</div>
            <?php endforeach; ?>
        <?php else: ?>
            <div id="no_card_message"><?php echo Mage::helper('mp_gateway')->__('This customer has no saved cards.') ?></div>
        <?php endif; ?>
    </div> <script type="text/javascript">
//<![CDATA[
var deleteButtonId = <?php echo $_iterator ?>;

var cardsModel = Class.create();
cardsModel.prototype = {
    initialize : function() {
        this.activeItem   = null;
        this.itemTemplate = $('card_item_template');
        this.formTemplate = $('card_form_template');
        this.itemContainer= $('card_list');
        this.formContainer= $('card_form_container');
        this.baseItemId   = 'new_item';

        this.itemContentTemplate = new Template('#{card_type}<br /> #{card_number}<br /> #{expmon}/#{expyear}<br /> #{cid}');

        this.onNewCardClick  = this.addNewCard.bindAsEventListener(this);
        this.onItemMouseOver    = this.itemMouseOver.bindAsEventListener(this);
        this.onItemMouseOut     = this.itemMouseOut.bindAsEventListener(this);
        this.onItemMouseClick   = this.itemMouseClick.bindAsEventListener(this);
        this.onItemFormFieldChange = this.syncFormData.bindAsEventListener(this);

        this.loader = new varienLoader(true);

        this.reloadItemList(1);

        for(var i=0,n=this.itemList.length; i<n; i++){
            if(this.itemList[i].id){
                this.addItemObservers(this.itemList[i]);
                this.initItem(this.itemList[i]);
            }
        }
        if($('add_new_card_button')){
            Event.observe('add_new_card_button', 'click', this.onNewCardClick)
        }

        this.setActiveItem(this.itemList[0]);
        this.setCardAsDefault();
    },

    reloadItemList : function(initial){
        this.itemList = $$('#card_list li');
        if( initial ) {
            this.itemCount = this.itemList.length;
        }
        if(!this.itemList.length){
            if($('no_card_message')){
                $('no_card_message').show();
            }
            else {
                this.formContainer.innerHTML+= '<div id="no_card_message"><?php echo Mage::helper('core')->jsQuoteEscape(Mage::helper('customer')->__('This customer has no saved cards.')) ?></div>'
            }
        }
    },

    initItem : function(item){
        if(item && $('form_'+item.id)){
            item.formBlock = $('form_'+item.id);
            Element.hide($('form_'+item.id));
            $('form_'+item.id).statusBar = item;
            $('form_'+item.id).cardItem = item;

        }
    },

    addItemObservers : function(item){
        if(item.id){
            Event.observe(item, 'mouseover', this.onItemMouseOver);
            Event.observe(item, 'mouseout', this.onItemMouseOut);
            Event.observe(item, 'click', this.onItemMouseClick);
        }
    },

    addNewCard : function(event){
        if(this.canCreateNewCard){
            this.itemCount++;
            if($('no_card_message')){
                $('no_card_message').hide();
            }
            // preventing duplication of ids for fields and blocks
            while ($$("div[id='form_card_item_" + this.itemCount + "']").length) {
                this.itemCount++;
            }
            // create new form elements
            Element.insert(this.formContainer, {bottom:
                '<div id="' + 'form_' + this.baseItemId + this.itemCount + '">'
                + this.prepareTemplate(this.formTemplate.innerHTML)
                + '</div>'
            });

            var newForm = $('form_' + this.baseItemId + this.itemCount);

            Element.hide(newForm);
            var template = '<li id="' + this.baseItemId+this.itemCount + '">';
            deleteButtonId ++;
            template    += this.prepareTemplate(this.itemTemplate.innerHTML).replace('delete_button', 'delete_button'+ deleteButtonId);
            template    += '</li>';
            Element.insert(this.itemContainer, {bottom: template});
            var newItem = $(this.baseItemId+this.itemCount);
            newItem.isNewCard = true;
            newItem.formBlock = newForm;


            newForm.statusBar = newItem;
            newForm.cardItem = newItem;

            this.addItemObservers(newItem);
            this.setActiveItem(newItem);

        }
        this.reloadItemList();
        //Event.stop(event);
    },

    prepareTemplate : function(template){
        return template
            .replace(/<?php echo $_templatePrefix ?>/g, '_item'+this.itemCount)
            .replace(/_counted="undefined"/g, '')
            .replace(/"select_button_"/g, 'select_button_' + this.itemCount)
            ;
    },

    canCreateNewCard : function(){
        return true;
    },

    itemMouseOver : function(event){
        var element = Event.findElement(event, 'li');
        Element.addClassName(element, 'over');
    },

    itemMouseOut : function(event){
        var element = Event.findElement(event, 'li');
        Element.removeClassName(element, 'over');
    },

    itemMouseClick : function(event){
        if (!Event) {
            return;
        }
        var element = Event.findElement(event, 'li'); // find top item
        var elem = Event.element(event); // exact element clicked

        if ( ((elem.tagName.toUpperCase() == 'A') && elem.id.match(/^delete_button([0-9]*?)$/)) || ((elem.tagName.toUpperCase() == 'IMG') && elem.id.match(/^delete_button([0-9]*?)$/)) ) {
            this.deleteCard(element);
            Event.stop(event);
        }
        else if(elem.tagName.toUpperCase() == 'INPUT') {
            this.setCardAsDefault(element);
        }
        else {
            this.setActiveItem(element);
        }
    },

     setCardAsDefault : function(){
        for(var i=0; i<this.itemList.length;i++){
            if(this.itemList[i].id){
                var inputs = $(this.itemList[i].id).getElementsBySelector('input');
                var isActive = false;
                for(var j in inputs){
                    if(inputs[j].type=='radio' && inputs[j].checked && this.itemList.length > 1){
                        isActive = true;
                    }
                }
                this.toggleDeleteButton(this.itemList[i], !isActive);
            }
        }
    },

    toggleDeleteButton : function(item, flag){
        if(flag){
            $(item).select('.btn-remove-card').each(Element.show);
            $(item.formBlock).getElementsBySelector('.delete-card').each(Element.show);
        } else {
            $(item).select('.btn-remove-card').each(Element.hide);
            $(item.formBlock).getElementsBySelector('.delete-card').each(Element.hide);
        }
    },

    setActiveItem : function(item){
        if(this.activeItem){
            Element.removeClassName(this.activeItem, 'on');
            if($('form_'+this.activeItem.id)){
                Element.hide($('form_'+this.activeItem.id));
            }
        }
        Element.addClassName(item, 'on');

        if(item && $('form_'+item.id)){
            $('form_'+item.id).changeRelation = item;
            $('form_'+item.id).cardItem = item;
            Element.show($('form_'+item.id));
            //new Effect.Appear($('form_'+item.id), {duration : 0.3 });
            //$('form_'+item.id).focus();
            this.addFieldChangeObserver($('form_'+item.id));
        }

        this.activeItem = item;
    },

    getFormContainerFields : function(container){
        var fields = $$( '#' + container.id + ' input','#' + container.id + ' select','#' + container.id + ' textarea');
        return fields;
    },

    addFieldChangeObserver : function(container){
        var fields = this.getFormContainerFields(container);
        for (var i = 0; i < fields.length; i++) {
            Event.observe(fields[i], 'change', this.onItemFormFieldChange);
        }

    },

    syncFormData : function(evt){
        var container = false;

        if(!evt.addClassName) {
            var elm = Event.element(evt);
        } else {
            var elm = evt;
        }

        elm = $(elm);
        while(elm.tagName.toUpperCase() != 'BODY') {
            if(elm.cardItem){
                container = elm;
            }
            elm = $(elm.parentNode);
        }

        if(container){
            var data = {};
            var fields = this.getFormContainerFields(container);
            for(var i=0; i < fields.size(); i++){
                if(fields[i].id){
                    var id = fields[i].id.replace(/^(_item)?[0-9]+/, '');
                    var id = id.replace(/^(id)?[0-9]+/, '');
                    var value = fields[i].getValue();
                    var tagName = fields[i].tagName.toLowerCase();
                    if (tagName == 'select') {
                        if (fields[i].multiple) {
                            var values = $([]);
                            var l = fields[i].options.length;
                            for (j=0; j<l; j++) {
                                var o = fields[i].options[j];
                                if (o.selected === true) {
                                    values[values.length] = o.text.escapeHTML();
                                }
                            }
                            data[id] = values.join(', ');
                        } else {
                            var option = fields[i].options[fields[i].selectedIndex],
                                text   = option.value == '0' || option.value == '' ? '' : option.text;
                            data[id] = text.escapeHTML();
                        }
                    } else if (value !== null) {
                        data[id] = value.escapeHTML();
                    }
                }
            }

            // Set data to html
            var itemContainer = container.cardItem.getElementsBySelector('card');
            if(itemContainer[0]){
                var html = this.itemContentTemplate.evaluate(data);
                html = html.replace(new RegExp('(<br\\s*/?>\\s*){2,}','img'),'<br/>');
                html = html.replace(new RegExp('<br\\s*/?>(\\s*,){1,}\\s*<br\\s*/?>','ig'),'<br/>');
                html = html.replace(new RegExp('<br\\s*/?>(\\s*,){1,}(.*)<br\\s*/?>','ig'),'<br/>$2<br/>');
                html = html.replace(new RegExp('<br\\s*/?>(.*?)(,\\s*){1,}<br\\s*/?>','ig'),'<br/>$1<br/>');
                html = html.replace(new RegExp('<br\\s*/?>(.*?)(,\\s*){2,}(.*?)<br\\s*/?>','ig'),'<br/>$1, $3<br/>');
                html = html.replace(new RegExp('t:\\s*<br\\s*/?>','ig'),'');
                html = html.replace(new RegExp('f:\\s*<br\\s*/?>','ig'),'');
                html = html.replace(new RegExp('vat:\\s*$','ig'),'');
                itemContainer[0].innerHTML = html;
            }
        }
    },

    deleteCard : function(item){
        if(confirm('<?php echo Mage::helper('core')->jsQuoteEscape(Mage::helper('customer')->__('Are you sure you want to delete this card?')) ?>')){
            if (!item.isNewCard && $('deleted_'+item.id)){
                $('deleted_'+item.id).value = 1;
                if (item.formBlock){
                    item.formBlock.addClassName('ignore-validation');
                }
            }
            if (this.activeItem == item && item != this.itemList[0]) this.setActiveItem(this.itemList[0]);
            if (item == this.itemList[0] && (this.itemList[1])) this.setActiveItem(this.itemList[1]);

            this.formContainer.removeChild(item.formBlock);
            this.itemContainer.removeChild(item);
            this.reloadItemList();
            this.setCardAsDefault();
        }
    },

    cancelAdd : function(button){
        if(confirm('<?php echo Mage::helper('core')->jsQuoteEscape(Mage::helper('customer')->__('Are you sure you want to cancel adding of this card?')) ?>')){
            var item = $(this.baseItemId + button.id.replace(new RegExp('[a-z_]*',''), ''));

            if( item.isNewCard){
                if ( this.activeItem == item ) this.formContainer.removeChild(item.formBlock);
            }
            if ( this.activeItem == item && item != this.itemList[0] ) this.setActiveItem(this.itemList[0]);
            if ( item == this.itemList[0] && (this.itemList[1]) ) this.setActiveItem(this.itemList[1]);

            this.itemContainer.removeChild(item);

            this.reloadItemList();
            this.setCardAsDefault();
        }
    }
}

customerCards = new cardsModel();
//]]>
</script>
		</td>
	</tr>
</table>
